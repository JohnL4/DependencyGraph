* DependencyGraph

  An attempt to write a Haskell pgm that turns indented text log output into a GraphViz dependency
  graph.

* Sample Run

  #+BEGIN_EXAMPLE
    a
      b
      c
      d   \
        e  \__ 1: process, drop 
        f  /                   
      g                        
      h                        
        i                      
        j   \ 
          k  \__ 2: process, drop
          m  /
          n /
      q
        d -- repeated subtree
          e
          f
      r
        s
        t
    u
    v
      w
      x
  #+END_EXAMPLE
  
  So, we process:

  - a -> b (indented)
  - a -> c (indent continues)
  - a -> d (indent continues)
    - d -> e (indented again? 3rd line indented?)
    - d -> f
  - drop subtree starting with d
  - a -> g
  - a -> h
    - h -> i
    - h -> j
      - j -> k
      - j -> m
      - j -> n
    - drop subtree starting with j
  - drop subtree starting with h
  - a -> q
    - q -> d
      - d -> e -- duplicated, so append comment or highlight in red or whatever, e.g., "[color=red]"
      - d -> f -- duplicated, so append comment or highlight in red or whatever
  - a -> r
    - r -> s
    - r -> t
  - drop subtree starting with r
  - drop subtree starting with a
  - (there is no edge ending at u)
  - drop u
  - v -> w
  - v -> x
    
